plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'jacoco'
    id 'org.ec4j.editorconfig' version "0.0.3"
}

group = 'com.xylia.domain.payments.amortization'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'com.google.guava', name: 'guava', version: '30.0-jre'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.18.1'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    ignoreFailures(false)
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        html.destination file("${buildDir}/jacocoHtmlReport")
        xml.destination file("${buildDir}/reports/jacoco/TEST-XMLReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
    // to run test coverage verification during the build.
    check.dependsOn jacocoTestCoverageVerification, jacocoTestReport
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
